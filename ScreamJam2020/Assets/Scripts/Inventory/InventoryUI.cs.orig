using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using UnityEngine.UI;

public class InventoryUI : MonoBehaviour
{
    private InventorySystem playerInventory;
    public InventoryManager inventoryManager;

    //Get UI references
    public Button nextButton;
    public Button prevButton;
    public TextMeshProUGUI textName;
    public TextMeshProUGUI textDescription;
    public TextMeshProUGUI textAmount;
    public Transform itemPrefabPosition;
    public Color normalColor;
    public Color disabledColor;
    private GameObject itemPrefab;

    [Tooltip("GameObject to toggle active when using Inventory UI")]
    public GameObject inventoryReference;

    void Start()
    {
        playerInventory = inventoryManager.currentInventory;
        inventoryManager.UpdateInventoryEvent += UpdateInventoryUI;

<<<<<<< HEAD
        textName.text = "";
        textDescription.text = "";
        textAmount.text = "";
        InventoryManager.OnInventoryFullyEmptySlot += DeleteItem;
        MonsterAI.OnMonsterKillPlayer += DisableInventoryUI;
=======
        EmptyInventory();
>>>>>>> f151327784ec78a704ec2d4cbc3e8f429e12c4e2
    }

    void UpdateInventoryUI()
    {
        if (InventoryManager.inventoryVisible)
        {
            inventoryReference.SetActive(true);
            CheckButton(nextButton, prevButton);

            if (playerInventory.currentSlot < playerInventory.inventory.Count)
            {
                ItemSlot currentItem = playerInventory.inventory[playerInventory.currentSlot];

                if (currentItem.itemAmount != 0)
                {
                    //Update text
                    textName.text = currentItem.item.name;
                    textDescription.text = currentItem.item.description;
                    textAmount.text = "Amount: " + currentItem.itemAmount + " / " + currentItem.item.maxStack;

                    //Create the selected inventory prefab and delete the old one
                    GameObject newInventoryPrefab = Instantiate(currentItem.item.itemModel, itemPrefabPosition);
                    Destroy(itemPrefab);

                    //Add InventoryPrefab component for spin effect
                    newInventoryPrefab.AddComponent<InventoryPrefab>();
                    newInventoryPrefab.GetComponent<Rigidbody>().isKinematic = true;

                    itemPrefab = newInventoryPrefab;
                }
                else
                {
                    EmptyInventory();
                }
            }
            else
            {
                EmptyInventory();
            }
        }
        else
        {
            inventoryReference.SetActive(false);
        }
    }

<<<<<<< HEAD
    public void CheckButton(Button nextButton,Button prevButton)
    {
        if(inventoryManager.currentInventory.currentSlot >= playerInventory.inventory.Count-1)
        {
            nextButton.image.color = disabledColor;
        }
        else
        {
            nextButton.image.color = normalColor;
        }

        if (inventoryManager.currentInventory.currentSlot <= 0)
        {
            prevButton.image.color = disabledColor;
        }
        else
        {
            prevButton.image.color = normalColor;
        }

    }

    public void DeleteItem()
=======
    //Clear all item text from the inventory
    void EmptyInventory()
>>>>>>> f151327784ec78a704ec2d4cbc3e8f429e12c4e2
    {
        textName.text = "";
        textDescription.text = "";
        textAmount.text = "";

        if (itemPrefab != null)
            Destroy(itemPrefab);
    }

<<<<<<< HEAD
    private void DisableInventoryUI()
    {
        gameObject.SetActive(false);
    }

=======
>>>>>>> f151327784ec78a704ec2d4cbc3e8f429e12c4e2
    void OnDestroy()
    {
        inventoryManager.UpdateInventoryEvent -= UpdateInventoryUI;
        InventoryManager.OnInventoryFullyEmptySlot -= DeleteItem;
        MonsterAI.OnMonsterKillPlayer -= DisableInventoryUI;
    }
}
